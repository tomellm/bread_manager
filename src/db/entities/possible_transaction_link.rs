//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "possible_transaction_link")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: String,
    pub leading: String,
    pub following: String,
    pub link_type: String,
    pub create_group: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::possible_transaction_link_create_group::Entity",
        from = "Column::CreateGroup",
        to = "super::possible_transaction_link_create_group::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    PossibleTransactionLinkCreateGroup,
    #[sea_orm(
        belongs_to = "super::transaction::Entity",
        from = "Column::Following",
        to = "super::transaction::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Transaction2,
    #[sea_orm(
        belongs_to = "super::transaction::Entity",
        from = "Column::Leading",
        to = "super::transaction::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Transaction1,
}

impl Related<super::possible_transaction_link_create_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PossibleTransactionLinkCreateGroup.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
