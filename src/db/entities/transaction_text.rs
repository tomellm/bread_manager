//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

use crate::model::transactions::properties::TransactionRelType;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "transaction_text")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, unique)]
    pub transaction_uuid: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub text_uuid: String,
    pub rel_type: TransactionRelType,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::text_content::Entity",
        from = "Column::TextUuid",
        to = "super::text_content::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    TextContent,
    #[sea_orm(
        belongs_to = "super::transaction::Entity",
        from = "Column::TransactionUuid",
        to = "super::transaction::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Transaction,
}

impl Related<super::text_content::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TextContent.def()
    }
}

impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transaction.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
