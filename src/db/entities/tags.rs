//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tags")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: String,
    pub tag: String,
    #[sea_orm(column_type = "Text")]
    pub description: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::profile_tags::Entity")]
    ProfileTags,
    #[sea_orm(has_many = "super::transaction_tags::Entity")]
    TransactionTags,
}

impl Related<super::profile_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProfileTags.def()
    }
}

impl Related<super::transaction_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TransactionTags.def()
    }
}

impl Related<super::profile::Entity> for Entity {
    fn to() -> RelationDef {
        super::profile_tags::Relation::Profile.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::profile_tags::Relation::Tags.def().rev())
    }
}

impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        super::transaction_tags::Relation::Transaction.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::transaction_tags::Relation::Tags.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
