//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

use crate::model::transactions::{
    movement::MovementUuid, properties::TransactionRelType, TransactionUuid,
};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "transaction_movement")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, unique)]
    pub transaction_uuid: TransactionUuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub movement_uuid: MovementUuid,
    pub rel_type: TransactionRelType,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::movement::Entity",
        from = "Column::MovementUuid",
        to = "super::movement::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Movement,
    #[sea_orm(
        belongs_to = "super::transaction::Entity",
        from = "Column::TransactionUuid",
        to = "super::transaction::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Transaction,
}

impl Related<super::movement::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Movement.def()
    }
}

impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transaction.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
