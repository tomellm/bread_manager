//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

use crate::model::transactions::{State, TransactionUuid};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "transaction")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: TransactionUuid,
    pub state: State,
    pub datetime_created: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::transaction_datetime::Entity")]
    Datetime,
    #[sea_orm(has_one = "super::transaction_movement::Entity")]
    Movement,
    #[sea_orm(has_one = "super::transaction_special::Entity")]
    Special,
    #[sea_orm(has_one = "super::transaction_tags::Entity")]
    Tags,
    #[sea_orm(has_one = "super::transaction_text::Entity")]
    Text,
}

impl Related<super::transaction_datetime::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Datetime.def()
    }
}

impl Related<super::transaction_movement::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Movement.def()
    }
}

impl Related<super::transaction_special::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Special.def()
    }
}

impl Related<super::transaction_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tags.def()
    }
}

impl Related<super::transaction_text::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Text.def()
    }
}

impl Related<super::datetime::Entity> for Entity {
    fn to() -> RelationDef {
        super::transaction_datetime::Relation::Datetime.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::transaction_datetime::Relation::Transaction
                .def()
                .rev(),
        )
    }
}

impl Related<super::movement::Entity> for Entity {
    fn to() -> RelationDef {
        super::transaction_movement::Relation::Movement.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::transaction_movement::Relation::Transaction
                .def()
                .rev(),
        )
    }
}

impl Related<super::special_content::Entity> for Entity {
    fn to() -> RelationDef {
        super::transaction_special::Relation::SpecialContent.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::transaction_special::Relation::Transaction
                .def()
                .rev(),
        )
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::transaction_tags::Relation::Tags.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::transaction_tags::Relation::Transaction.def().rev())
    }
}

impl Related<super::text_content::Entity> for Entity {
    fn to() -> RelationDef {
        super::transaction_text::Relation::TextContent.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::transaction_text::Relation::Transaction.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
