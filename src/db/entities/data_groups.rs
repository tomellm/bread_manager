//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

use crate::{db::DbUuid, model::group::GroupUuid};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "data_groups")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: GroupUuid,
    pub datetime_created: String,
    // ToDo - add how this was created
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::data_import_row::Entity")]
    DataImportRow,
    #[sea_orm(has_many = "super::datetime::Entity")]
    Datetime,
    #[sea_orm(has_many = "super::movement::Entity")]
    Movement,
    #[sea_orm(has_many = "super::special_content::Entity")]
    SpecialContent,
    #[sea_orm(has_many = "super::text_content::Entity")]
    TextContent,
}

impl Related<super::data_import_row::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DataImportRow.def()
    }
}

impl Related<super::datetime::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Datetime.def()
    }
}

impl Related<super::movement::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Movement.def()
    }
}

impl Related<super::special_content::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SpecialContent.def()
    }
}

impl Related<super::text_content::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TextContent.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
