//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::model::{
    origins::OriginUuid,
    profiles::{
        columns::{self, ModelParsableWrapper},
        ProfileUuid, State,
    },
    transactions::{
        content_description::{
            ContentDescriptionUuid, ModelContentDescription,
        },
        special_content::SpecialType,
    },
};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "profile")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: ProfileUuid,
    pub name: String,
    pub top_margin: i32,
    pub bottom_margin: i32,
    pub delimiter: String,
    #[sea_orm(column_type = "Text")]
    pub amount: String,
    #[sea_orm(column_type = "Text")]
    pub datetime: String,
    #[sea_orm(column_type = "Text")]
    pub other_data: String,
    pub width: i32,
    pub origin_uuid: OriginUuid,
    pub state: State,
    pub datetime_created: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::data_import::Entity")]
    DataImport,
    #[sea_orm(
        belongs_to = "super::origins::Entity",
        from = "Column::OriginUuid",
        to = "super::origins::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Origins,
    #[sea_orm(has_many = "super::profile_content_descriptions::Entity")]
    ProfileContentDescriptions,
    #[sea_orm(has_one = "super::profile_tags::Entity")]
    ProfileTags,
}

impl Related<super::data_import::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DataImport.def()
    }
}

impl Related<super::origins::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Origins.def()
    }
}

impl Related<super::profile_content_descriptions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProfileContentDescriptions.def()
    }
}

impl Related<super::profile_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProfileTags.def()
    }
}

impl Related<super::content_description::Entity> for Entity {
    fn to() -> RelationDef {
        super::profile_content_descriptions::Relation::ContentDescription.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::profile_content_descriptions::Relation::Profile
                .def()
                .rev(),
        )
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::profile_tags::Relation::Tags.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::profile_tags::Relation::Profile.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub enum ParsableWrapper {
    Income(columns::money::Income),
    Expense(columns::money::Expense),
    PosExpense(columns::money::PosExpense),
    Movement(columns::money::Movement),
    ExpenseDateTime(columns::time::ExpenseDateTime),
    ExpenseDate(columns::time::ExpenseDate),
    ExpenseTime(columns::time::ExpenseTime),
    Description(ContentDescriptionUuid),
    Special(SpecialType, ContentDescriptionUuid),
}

impl ParsableWrapper {
    pub fn need_desc(&self) -> Option<&ContentDescriptionUuid> {
        match self {
            ParsableWrapper::Description(uuid)
            | ParsableWrapper::Special(_, uuid) => Some(uuid),
            _ => None,
        }
    }
}

impl From<(ParsableWrapper, Option<ModelContentDescription>)>
    for ModelParsableWrapper
{
    fn from(value: (ParsableWrapper, Option<ModelContentDescription>)) -> Self {
        match value.0 {
            ParsableWrapper::Income(income) => {
                ModelParsableWrapper::Income(income)
            }
            ParsableWrapper::Expense(expense) => {
                ModelParsableWrapper::Expense(expense)
            }
            ParsableWrapper::PosExpense(pos_expense) => {
                ModelParsableWrapper::PosExpense(pos_expense)
            }
            ParsableWrapper::Movement(movement) => {
                ModelParsableWrapper::Movement(movement)
            }
            ParsableWrapper::ExpenseDateTime(expense_date_time) => {
                ModelParsableWrapper::ExpenseDateTime(expense_date_time)
            }
            ParsableWrapper::ExpenseDate(expense_date) => {
                ModelParsableWrapper::ExpenseDate(expense_date)
            }
            ParsableWrapper::ExpenseTime(expense_time) => {
                ModelParsableWrapper::ExpenseTime(expense_time)
            }
            ParsableWrapper::Description(_) => {
                ModelParsableWrapper::Description(columns::other::Description(
                    value.1.unwrap(),
                ))
            }
            ParsableWrapper::Special(special_type, _) => {
                ModelParsableWrapper::Special(columns::other::Special(
                    special_type,
                    value.1.unwrap(),
                ))
            }
        }
    }
}

impl From<ModelParsableWrapper> for ParsableWrapper {
    fn from(value: ModelParsableWrapper) -> Self {
        match value {
            ModelParsableWrapper::Income(income) => {
                ParsableWrapper::Income(income)
            }
            ModelParsableWrapper::Expense(expense) => {
                ParsableWrapper::Expense(expense)
            }
            ModelParsableWrapper::PosExpense(pos_expense) => {
                ParsableWrapper::PosExpense(pos_expense)
            }
            ModelParsableWrapper::Movement(movement) => {
                ParsableWrapper::Movement(movement)
            }
            ModelParsableWrapper::ExpenseDateTime(expense_date_time) => {
                ParsableWrapper::ExpenseDateTime(expense_date_time)
            }
            ModelParsableWrapper::ExpenseDate(expense_date) => {
                ParsableWrapper::ExpenseDate(expense_date)
            }
            ModelParsableWrapper::ExpenseTime(expense_time) => {
                ParsableWrapper::ExpenseTime(expense_time)
            }
            ModelParsableWrapper::Description(description) => {
                ParsableWrapper::Description(description.0.uuid)
            }
            ModelParsableWrapper::Special(columns::other::Special(
                special_type,
                desc,
            )) => ParsableWrapper::Special(special_type, desc.uuid),
        }
    }
}
