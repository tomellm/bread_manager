//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

use crate::model::{
    origins::OriginUuid,
    profiles::{ProfileUuid, State},
};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "profile")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: ProfileUuid,
    pub name: String,
    pub top_margin: i32,
    pub bottom_margin: i32,
    pub delimiter: String,
    #[sea_orm(column_type = "Text")]
    pub amount: String,
    #[sea_orm(column_type = "Text")]
    pub datetime: String,
    #[sea_orm(column_type = "Text")]
    pub other_data: String,
    pub width: i32,
    pub origin_uuid: OriginUuid,
    pub state: State,
    pub datetime_created: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::data_import::Entity")]
    DataImport,
    #[sea_orm(
        belongs_to = "super::origins::Entity",
        from = "Column::OriginUuid",
        to = "super::origins::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Origins,
    #[sea_orm(has_many = "super::profile_content_descriptions::Entity")]
    ProfileContentDescriptions,
    #[sea_orm(has_one = "super::profile_tags::Entity")]
    ProfileTags,
}

impl Related<super::data_import::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DataImport.def()
    }
}

impl Related<super::origins::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Origins.def()
    }
}

impl Related<super::profile_content_descriptions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProfileContentDescriptions.def()
    }
}

impl Related<super::profile_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProfileTags.def()
    }
}

impl Related<super::content_description::Entity> for Entity {
    fn to() -> RelationDef {
        super::profile_content_descriptions::Relation::ContentDescription.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::profile_content_descriptions::Relation::Profile
                .def()
                .rev(),
        )
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::profile_tags::Relation::Tags.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::profile_tags::Relation::Profile.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
