//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

use crate::model::{
    data_import::{row::ImportRowUuid, row_item::RowItemUuid},
    transactions::{datetime::DatetimeUuid, movement::MovementUuid},
};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "data_import_row_item")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: RowItemUuid,
    pub origin_row: ImportRowUuid,
    pub item_index: i32,
    #[sea_orm(column_type = "Text")]
    pub content: String,
    pub datetime_uuid: Option<DatetimeUuid>,
    pub movement_uuid: Option<MovementUuid>,
    pub text_uuid: Option<String>,
    pub special_uuid: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::data_import_row::Entity",
        from = "Column::OriginRow",
        to = "super::data_import_row::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    DataImportRow,
    #[sea_orm(
        belongs_to = "super::datetime::Entity",
        from = "Column::DatetimeUuid",
        to = "super::datetime::Column::Uuid",
        on_update = "Restrict",
        on_delete = "SetNull"
    )]
    Datetime,
    #[sea_orm(
        belongs_to = "super::movement::Entity",
        from = "Column::MovementUuid",
        to = "super::movement::Column::Uuid",
        on_update = "Restrict",
        on_delete = "SetNull"
    )]
    Movement,
    #[sea_orm(
        belongs_to = "super::special_content::Entity",
        from = "Column::SpecialUuid",
        to = "super::special_content::Column::Uuid",
        on_update = "Restrict",
        on_delete = "SetNull"
    )]
    SpecialContent,
    #[sea_orm(
        belongs_to = "super::text_content::Entity",
        from = "Column::TextUuid",
        to = "super::text_content::Column::Uuid",
        on_update = "Restrict",
        on_delete = "SetNull"
    )]
    TextContent,
}

impl Related<super::data_import_row::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DataImportRow.def()
    }
}

impl Related<super::datetime::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Datetime.def()
    }
}

impl Related<super::movement::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Movement.def()
    }
}

impl Related<super::special_content::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SpecialContent.def()
    }
}

impl Related<super::text_content::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TextContent.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
