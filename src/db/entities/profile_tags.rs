//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

use crate::model::{profiles::ProfileUuid, tags::TagUuid};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "profile_tags")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, unique)]
    pub profile_uuid: ProfileUuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub tag_uuid: TagUuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::profile::Entity",
        from = "Column::ProfileUuid",
        to = "super::profile::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Profile,
    #[sea_orm(
        belongs_to = "super::tags::Entity",
        from = "Column::TagUuid",
        to = "super::tags::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Tags,
}

impl Related<super::profile::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Profile.def()
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tags.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
