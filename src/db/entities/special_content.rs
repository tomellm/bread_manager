//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

use crate::model::transactions::{
    content_description::ContentDescriptionUuid,
    group::GroupUuid,
    special_content::{SpecialContentUuid, SpecialType},
};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "special_content")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: SpecialContentUuid,
    pub description_uuid: ContentDescriptionUuid,
    #[sea_orm(column_type = "Text")]
    pub content: String,
    pub special_type: SpecialType,
    pub group_uuid: GroupUuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::content_description::Entity",
        from = "Column::DescriptionUuid",
        to = "super::content_description::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    ContentDescription,
    #[sea_orm(
        belongs_to = "super::data_groups::Entity",
        from = "Column::GroupUuid",
        to = "super::data_groups::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    DataGroups,
    #[sea_orm(has_many = "super::data_import_row_item::Entity")]
    DataImportRowItem,
    #[sea_orm(has_one = "super::transaction_special::Entity")]
    TransactionSpecial,
}

impl Related<super::content_description::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentDescription.def()
    }
}

impl Related<super::data_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DataGroups.def()
    }
}

impl Related<super::data_import_row_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DataImportRowItem.def()
    }
}

impl Related<super::transaction_special::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TransactionSpecial.def()
    }
}

impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        super::transaction_special::Relation::Transaction.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::transaction_special::Relation::SpecialContent
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
